apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  labels:
    app: mysql-label
spec:
  type: ClusterIP
  clusterIP: 10.99.99.99
  ports:
    - port: 3306
      name: mysql
      targetPort: 3306
  selector:
    app: mysql-label
    tier: mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  labels:
    app: mysql-label
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  labels:
    app: mysql-label
spec:
  selector:
    matchLabels:
      app: mysql-label
      tier: mysql
  replicas: 1
  strategy:
    type: Recreate
    # Recreate in the Deployment configuration YAML file.
    # This instructs Kubernetes to not use rolling updates.
    # Rolling updates will not work, as you cannot have more than one Pod running at a time.
    # The Recreate strategy will stop the first pod before creating a new one with the updated configuration.
  template:
    metadata:
      labels:
        app: mysql-label
        tier: mysql
    spec:
      containers:
        - image: mysql-img
          name: mysql
          imagePullPolicy: Never
          securityContext:
            privileged: true
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
          # PVs are resources in the cluster. PVCs are requests for those resources and also act as claim checks to the resource.
          # So a persistent volume (PV) is the "physical" volume on the host machine that stores your persistent data.
          # A persistent volume claim (PVC) is a request for the platform to create a PV for you, and you attach PVs to your pods via a PVC.
          # Something akin to
          # Pod -> PVC -> PV -> Host machine
